<div class="session-container session-search-container">
    <div class="row">

        <div class="col-lg-12">
            <div class="narrow-inner-container">
                <h2>Išči po vseh sejah</h2>

                <form method="get" action="/seje/isci/filter">

                    <div class="input-group search">
                        <input type="text" class="form-control simplebox" placeholder="" name="q" value="<%=query.q;%>">
                        <span class="input-group-btn">
                            <button class="btn btn-default" type="submit"><span class="glyphicon glyphicon-search" aria-hidden="true"></span></button>
                        </span>
                    </div>
                </form>
                <div class="searchinfo measure" data-mc="search" data-ma="infobox" data-mn="" data-mv="" data-toggle="modal" data-target="#modal-search-how">i</div>

            </div>

            <% if((typeof query.q !== "undefined") && (query.q.length > 0)){%>
            <div class="row">
                <div class="col-md-12">
                    <div class="searchfilter-container searchfilter-master-container">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="searchfilter-container" id="pps">
                                            <div class="searchfilter-label">Išči po poslancih in/ali poslanskih skupinah</div>
                                            <div class="searchfilter-input">
                                                <search-dropdown :alphabetise="false" :items="ppspodatki" :groups="ppsskupine" :placeholder="ppsinputPlaceholder"></search-dropdown>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="searchfilter-container" id="cas">
                                            <div class="searchfilter-label">Išči v časovnem obdobju</div>
                                            <div class="searchfilter-input">
                                                <search-dropdown :alphabetise="false" :items="caspodatki" :placeholder="casinputPlaceholder"></search-dropdown>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="searchfilter-container" id="seje">
                                    <div class="searchfilter-label">Išči po sejah</div>
                                    <div class="searchfilter-checkbox">
                                        <input id="dz" type="checkbox" class="checkbox" @click="toggleDZ" v-bind:checked="dz" v-bind:disabled="dzDisabled">
                                        <label for="dz">Seje Državnega zbora</label>
                                    </div>
                                    <div class="searchfilter-checkbox">
                                        <input id="kdz" type="checkbox" class="checkbox" @click="toggleKolegij" v-bind:checked="council" v-bind:disabled="kolegijDisabled">
                                        <label for="kdz">Seje Kolegija predsednika Državnega zbora</label>
                                    </div>
                                    <div class="searchfilter-checkbox">
                                        <input id="dt" type="checkbox" @click="handleCheckbox" v-bind:disabled="dtdisabled" :checked="dtchecked" class="checkbox with-input">
                                        <label for="dt">&nbsp;</label>
                                        <div class="searchfilter-input checkbox-searchfilter">
                                            <search-dropdown v-bind:class="{ disabled: dtdisabled }" :items="dtpodatki" :alphabetise="false" @click="handleCheckbox" :placeholder="dtinputPlaceholder"></search-dropdown>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div v-show="fetching" class="search-loader">
                            <div class="nalagalnik"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <a href="/seje/isci?q=<%= query.q %>" class="parlabutton parlabutton-filter">Enostavno iskanje</a>
                </div>
            </div>
            <!-- <div class="narrow-inner-container">
                <br><br>
                <h3 class="searchresults">Rezultati za iskalni niz "<%=query.q;%>"</h3>
            </div> -->
            <% } %>

        </div>
    </div>
</div>

<% include ./searchpopup.ejs %>

<script>

// http://isci.hr.parlameter.si/filter/kriza?people=80

// make query var
var query = <%- JSON.stringify(query); %>;

function capitalise(string) {
    return string[0].toUpperCase() + string.substring(1)
  }

    function getQueryParameters(str) {
        return (str || document.location.search).replace(/(^\?)/, '').split("&").map(function (n) {
            return n = n.split("="), this[n[0]] = n[1], this
        }.bind({}))[0];
    }

  function generateSearchUrl(queryParams) {
    var searchurl = "http://isci.hr.parlameter.si/filter/" + query.q + '?';
    if (queryParams.people && queryParams.people.length > 0) {
        searchurl = searchurl + 'people=' + queryParams.people
    }
    if (queryParams.parties && queryParams.parties.length > 0) {
        if (!searchurl.endsWith('?')) {
            searchurl = searchurl + '&parties=' + queryParams.parties
        } else {
            searchurl = searchurl + 'parties=' + queryParams.parties
        }
    }
    if (queryParams.time_filter && queryParams.time_filter.length > 0) {
        if (!searchurl.endsWith('?')) {
            searchurl = searchurl + '&time_filter=' + queryParams.time_filter
        } else {
            searchurl = searchurl + 'time_filter=' + queryParams.time_filter
        }
    }
    if (queryParams.wb && queryParams.wb.length > 0) {
        if (!searchurl.endsWith('?')) {
            searchurl = searchurl + '&wb=' + queryParams.wb
        } else {
            searchurl = searchurl + 'wb=' + queryParams.wb
        }
    }
    if (queryParams.dz) {
        if (!searchurl.endsWith('?')) {
            searchurl = searchurl + '&dz=' + queryParams.dz
        } else {
            searchurl = searchurl + 'dz=' + queryParams.dz
        }
    }
    if (queryParams.council) {
        if (!searchurl.endsWith('?')) {
            searchurl = searchurl + '&council=' + queryParams.council
        } else {
            searchurl = searchurl + 'council=' + queryParams.council
        }
    }


    return searchurl;
  }

  function formatDate(date) {
      var month = date.getMonth();
      var year = date.getFullYear()

      switch(month) {
        case 0:
            return 'Januar ' + String(year);
            break;
        case 1:
            return 'Februar ' + String(year);
            break;
        case 2:
            return 'Marec ' + String(year);
            break;
        case 3:
            return 'April ' + String(year);
            break;
        case 4:
            return 'Maj ' + String(year);
            break;
        case 5:
            return 'Junij ' + String(year);
            break;
        case 6:
            return 'Julij ' + String(year);
            break;
        case 7:
            return 'Avgust ' + String(year);
            break;
        case 8:
            return 'September ' + String(year);
            break;
        case 9:
            return 'Oktober ' + String(year);
            break;
        case 10:
            return 'November ' + String(year);
            break;
        case 11:
            return 'December ' + String(year);
            break;
      }
  }

  function formatTimeFilter(date) {
      var day = 1;
      var month = date.getMonth() + 1;
      var year = date.getFullYear();

      return String(day) + '.' + String(month) + '.' + String(year);
  }

  var testis = new Vue({
    el: '.searchfilter-master-container',
    components: ['SearchDropdown'],
    computed: {
      ppsinputPlaceholder: function() {
        if (this.ppspodatki[0]) {
            if (this.ppspodatki[0].id === 'loading') {
                return 'Nalagamo filtre ...'
            }
        }
            return this.ppsselectedTags.length > 0 ? 'Izbranih filtrov: ' + this.ppsselectedTags.length : 'Izberi filtre'
      },
      ppsselectedTags: function() {
        return this.ppspodatki
          .filter(function(tag) { return tag.selected })
          .map(function(tag) { return tag.id });
      },
      casinputPlaceholder: function() {
          if (this.caspodatki[0]) {
              if (this.caspodatki[0].id === 'loading') {
                return 'Nalagamo filtre ...'
            }
          }
        return this.casselectedTags.length > 0 ? 'Izbranih filtrov: ' + this.casselectedTags.length : 'Izberi filtre'
      },
      casselectedTags: function() {
        return this.caspodatki
          .filter(function(tag) { return tag.selected })
          .map(function(tag) { return tag.id });
      },
      dtinputPlaceholder: function() {
          if (this.dtdisabled) {
              return 'Ni delovnih teles.';
          }
          if (this.dtpodatki[0]) {
              if (this.dtpodatki[0].id === 'loading') {
                return 'Nalagamo delovna telesa ...'
            }
          }
            return this.dtselectedTags.length > 0 ? 'Izbranih delovnih teles: ' + this.dtselectedTags.length : 'Izberi delovna telesa'
      },
      dtselectedTags: function() {
        return this.dtpodatki
          .filter(function(tag) { return tag.selected })
          .map(function(tag) { return tag.id });
      },
      filters: function() {
        return {
            people: this.ppsselectedTags
                .filter(function(tag) {
                    return tag.indexOf('ps') === -1;
                })
                .map(function(tag) {
                    return tag.split('p')[1];
                }),
            parties: this.ppsselectedTags
                .filter(function(tag) {
                    return tag.indexOf('ps') !== -1;
                }).map(function(tag) {
                    return tag.split('ps')[1];
                }),
            time_filter: this.caspodatki
                .filter(function(tag) {
                    return tag.selected;
                }).map(function(tag) {
                    return '1.' + String(new Date(tag.date).getMonth() + 1) + '.' + String(new Date(tag.date).getFullYear());
                }),
            wb: this.dtpodatki
                .filter(function(tag) {
                    return tag.selected;
                }).map(function(tag) {
                    return tag.id;
                }),
            dz: this.dz,
            council: this.council
        }
      },
      dtchecked: function() {
          var tmpchecked = this.dtselectedTags.length > 0 ? true : false;
          return tmpchecked
      }
    },
    created: function() {
        var self = this;
        $.get(generateSearchUrl(getQueryParameters()), function(response) {
            self.fetching = false;
            // poslanci in poslanske skupine
            var poslanci = response.facet_counts.facet_fields.speaker_i
                .filter(function(person) {
                    return person.score > 0;
                })
                .map(function(person) {
                    var tagperson = {
                        id: 'p' + String(person.person.id),
                        label: person.person.name,
                        count: person.score,
                        selected: false
                    }
                    if (query.people) {
                        query.people.split(',').forEach(function(element) {
                            if (element === String(person.person.id)) {
                                tagperson.selected = true
                            }
                        });
                    }
                    return tagperson
                })
                .sort(function(a, b) {
                    return b.count - a.count;
                });

            console.log(poslanci);

            var ps = response.facet_counts.facet_fields.party_e
                .filter(function(party) {
                    return party.score > 0;
                })
                .map(function(party) {
                    var tagparty = {
                        id: 'ps' + String(party.party.id),
                        label: party.party.name,
                        count: party.score,
                        selected: false
                    }
                    if (query.parties && query.parties.indexOf(String(party.party.id)) !== -1) {
                        tagparty.selected = true
                    }
                    return tagparty
                })
                .sort(function(a, b) {
                    return b.count - a.count;
                });

            console.log(ps);

            self.ppspodatki = poslanci.concat(ps);

            console.log(poslanci.concat(ps));
            console.log(self.ppspodatki);

            self.ppsskupine = [
                {
                    label: 'Poslanke in poslanci',
                    items: poslanci.map(function (person) {
                        return person.id;
                    })
                }, {
                    label: 'Poslanske skupine',
                    items: ps.map(function (party) {
                        return party.id;
                    })
                }
            ]

            // cas
            var castemp = [];
            response.facet_counts.facet_ranges.datetime_dt.counts.forEach(function (e, i) {
                if (i % 2 === 0 && response.facet_counts.facet_ranges.datetime_dt.counts[i + 1] !== 0) {
                    tempobject = {
                        id: e,
                        date: new Date(e),
                        label: formatDate(new Date(e)),
                        selected: false,
                        count: response.facet_counts.facet_ranges.datetime_dt.counts[i + 1]
                    }

                    if (query.time_filter) { // && formatTimeFilter(new Date(e)).indexOf(query.time_filter) !== -1) {
                        query.time_filter.split(',').forEach(function (element) {
                            if (formatTimeFilter(new Date(e)) === element) {
                                tempobject.selected = true
                            }
                        });
                    }

                    castemp.push(tempobject);
                }
            });
            self.caspodatki = castemp.sort(function(a, b) {
                return new Date(a.date) - new Date(b.date);
            });

            // delovna telesa
            self.dtpodatki = response.organizations.map(function (wb) {

                var tempobject = {
                    id: wb.id,
                    label: wb.name,
                    selected: false,
                    count: wb.score
                };

                if (query.wb) { // && formatTimeFilter(new Date(e)).indexOf(query.time_filter) !== -1) {
                    query.wb.split(',').forEach(function (element) {
                        if (String(wb.id) === element) {
                            tempobject.selected = true
                        }
                    });
                }

                return tempobject;
            })
            .sort(function(a, b) {
                return b.count - a.count;
            });
            if (!response.has_council_score) {
                self.kolegijDisabled = true;
            }
            if (!response.has_dz_score) {
                self.dzDisabled = true;
            }
            if (query.dz) {
                self.dz = true;
            }
            if (query.council) {
                self.council = true;
            }
            if (response.organizations.length === 0) {
                self.dtdisabled = true;
            }

            window.setTimeout(function() {self.first_load = false;}, 1000);
        });
    },
    data: function() {
      return {
        ppspodatki: [{id: 'loading', label: 'Nalagamo filtre ...', selected: false}],
        ppsskupine: [{label: '', items: 'loading'}],
        caspodatki: [{id: 'loading', label: 'Nalagamo filtre ...', selected: false}],
        dtpodatki: [{id: 'loading', label: 'Nalagamo delovna telesa ...', selected: false}],
        dtchecked: false,
        first_load: true,
        fetching: true,
        dzDisabled: false,
        kolegijDisabled: false,
        dtdisabled: false,
        dz: false,
        council: false
      }
    },
    methods: {
        toggleDZ: function(event) {
            if (this.dz) {
                this.dz = false;
            } else {
                this.dz = true;
            }

            this.filterMyResults();
        },
        toggleKolegij: function(event) {
            if (this.council) {
                this.council = false;
            } else {
                this.council = true;
            }

            this.filterMyResults();
        },
        handleCheckbox: function(event) {
            if (!testis.dtchecked) {
                testis.dtpodatki.map(function (tag) {
                    tag.selected = true;
                    return tag
                });
            } else {
                testis.dtpodatki.map(function (tag) {
                    tag.selected = false;
                    return tag
                });
            }
        },
        filterMyResults: function(event) {
            var filterparams = ''
            if (testis.filters.people.length > 0) {
                filterparams = filterparams + '&people=' + testis.filters.people.join(',')
            }
            if (testis.filters.parties.length > 0) {
                filterparams = filterparams + '&parties=' + testis.filters.parties.join(',')
            }
            if (testis.filters.time_filter.length > 0) {
                filterparams = filterparams + '&time_filter=' + testis.filters.time_filter.join(',')
            }
            if (testis.filters.wb.length > 0) {
                filterparams = filterparams + '&wb=' + testis.filters.wb.join(',')
            }
            if (testis.filters.dz) {
                filterparams = filterparams + '&dz=' + testis.filters.dz
            }
            if (testis.filters.council) {
                filterparams = filterparams + '&council=' + testis.filters.council
            }
            document.location.href = '/seje/isci/filter?q=' + query.q + filterparams
        }
    },
    watch: {
        ppsselectedTags(newVal, oldVal) {
            if (JSON.stringify(newVal) !== JSON.stringify(oldVal) && !this.first_load) {
                this.filterMyResults();
            }
        },
        casselectedTags(newVal, oldVal) {
            if (JSON.stringify(newVal) !== JSON.stringify(oldVal) && !this.first_load) {
                this.filterMyResults();
            }
        },
        dtselectedTags(newVal, oldVal) {
            if (JSON.stringify(newVal) !== JSON.stringify(oldVal) && !this.first_load) {
                this.filterMyResults();
            }
        }
    }
  });


</script>
